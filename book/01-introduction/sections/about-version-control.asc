=== A verziókezelésről

(((version control)))
Mi az a verziókezelés és miért érdemes vele foglalkozni? Egy verziókezelő rendszerrel folyamatosan elmenthetjük a fájlok aktuális állapotát miközben módosítjuk azokat, így később bármely verzió visszaállítható vele. Habár a könyvben bemutatott példákban szoftverfejlesztésnél használt forráskódok szerepelnek, valójában tetszőleges fájlt verziókezelés alá vonhatunk.

Szoftverfejlesztés (vagy akár grafikus munka) során meg szeretnénk őrizni a forrásfájlok valamennyi verzióját, e célra egy verziókezelő rendszer (angolul Version Control System, továbbiakban VCS) a legalkalmasabb eszköz. Egy verziókezelővel visszaállíthatjuk a fájlok, vagy akár a teljes projekt bármely korábbi állapotát, áttekinthetjük a korábbi módosításokat, láthatjuk ki mikor módosított egy fájlt, amely később problémát okozott, stb. Verziókezelőt használva ha elrontunk valamit, vagy véletlenül letörlünk egy fájlt, könnyen visszaállíthatjuk a korábbi, működő állapotot, és mindezt ráadásul minimális többletmunkával.

==== Lokális verziókezelő rendszerek

(((version control,local)))
Sokan úgy oldják meg a verziókezelést, hogy időnként átmásolják a projekthez tartozó fájlokat egy másik könyvtárba (jobb esetben a könyvtárnév tartalmaz legalább egy dátumot).
Ez a módszer gyakori, mivel nagyon egyszerű és nincs szükség hozzá semmilyen extra programra, azonban sok hibalehetőséget hordoz magában.
Könnyű elfelejteni, hogy melyik könyvtárban van egy adott változata a projektnek, továbbá ha egy fájlt véletlenül felülírunk, sokáig keresgélhetünk egy megfelelő verzió után.

A probléma megoldására régóta kifejlesztették már a lokális verziókövető rendszereket (Local Version Control System, LVCS), amelyek egy egyszerű adatbázis segítségével tartják nyilván az adott fájlokat.

.Lokális verziókezelés.
image::images/local.png[Lokális verziókezelés diagram]

Az egyik legnépszerűbb lokális verziókezelő a GNU Revision Control System (RCS), amely még ma is sok gyártó disztribúciójában elérhető, még Mac OS X-en is, ha feltelepítjük a Fejlesztői Eszközöket.
Ez a rendszer gyakorlatilag úgy működik, hogy megőrzi a verziók közötti "patch"-eket (fájlverziók közötti különbségeket) egy speciális formátumban; ezután egy fájl bármely korábbi verzióját vissza tudja állítani a patchek felhasználásával.

==== Centralized Version Control Systems

(((version control,centralized)))
The next major issue that people encounter is that they need to collaborate with developers on other systems.
To deal with this problem, Centralized Version Control Systems (CVCSs) were developed.
These systems, such as CVS, Subversion, and Perforce, have a single server that contains all the versioned files, and a number of clients that check out files from that central place. (((CVS)))(((Subversion)))(((Perforce)))
For many years, this has been the standard for version control.

.Centralized version control.
image::images/centralized.png[Centralized version control diagram]

This setup offers many advantages, especially over local VCSs.
For example, everyone knows to a certain degree what everyone else on the project is doing.
Administrators have fine-grained control over who can do what; and it's far easier to administer a CVCS than it is to deal with local databases on every client.

However, this setup also has some serious downsides.
The most obvious is the single point of failure that the centralized server represents.
If that server goes down for an hour, then during that hour nobody can collaborate at all or save versioned changes to anything they're working on.
If the hard disk the central database is on becomes corrupted, and proper backups haven't been kept, you lose absolutely everything – the entire history of the project except whatever single snapshots people happen to have on their local machines.
Local VCS systems suffer from this same problem – whenever you have the entire history of the project in a single place, you risk losing everything.

==== Distributed Version Control Systems

(((version control,distributed)))
This is where Distributed Version Control Systems (DVCSs) step in.
In a DVCS (such as Git, Mercurial, Bazaar or Darcs), clients don't just check out the latest snapshot of the files: they fully mirror the repository.
Thus if any server dies, and these systems were collaborating via it, any of the client repositories can be copied back up to the server to restore it.
Every clone is really a full backup of all the data.

.Distributed version control.
image::images/distributed.png[Distributed version control diagram]

Furthermore, many of these systems deal pretty well with having several remote repositories they can work with, so you can collaborate with different groups of people in different ways simultaneously within the same project.
This allows you to set up several types of workflows that aren't possible in centralized systems, such as hierarchical models.
