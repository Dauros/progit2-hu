=== A verziókezelésről

(((version control)))
Mi az a verziókezelés és miért érdemes vele foglalkozni?
Egy verziókezelő rendszerrel folyamatosan elmenthetjük a fájlok aktuális állapotát miközben módosítjuk azokat, így később bármely verzió visszaállítható vele.
Habár a könyvben bemutatott példákban szoftverfejlesztésnél használt forráskódok szerepelnek, valójában tetszőleges fájlt verziókezelés alá vonhatunk.

Szoftverfejlesztés (vagy akár grafikus munka) során meg szeretnénk őrizni a forrásfájlok valamennyi verzióját, e célra egy verziókezelő rendszer (angolul Version Control System, továbbiakban VCS) a legalkalmasabb eszköz.
Egy verziókezelővel visszaállíthatjuk a fájlok, vagy akár a teljes projekt bármely korábbi állapotát, áttekinthetjük a korábbi módosításokat, láthatjuk ki mikor módosított egy fájlt, amely később problémát okozott, stb.
Verziókezelőt használva ha elrontunk valamit, vagy véletlenül letörlünk egy fájlt, könnyen visszaállíthatjuk a korábbi, működő állapotot, és mindezt ráadásul minimális többletmunkával.

==== Lokális verziókezelő rendszerek

(((version control,local)))
Sokan úgy oldják meg a verziókezelést, hogy időnként átmásolják a projekthez tartozó fájlokat egy másik könyvtárba (jobb esetben a könyvtárnév tartalmaz legalább egy dátumot).
Ez a módszer gyakori, mivel nagyon egyszerű és nincs szükség hozzá semmilyen extra programra, azonban sok hibalehetőséget hordoz magában.
Könnyű elfelejteni, hogy melyik könyvtárban van egy adott változata a projektnek, továbbá ha egy fájlt véletlenül felülírunk, sokáig keresgélhetünk egy megfelelő verzió után.

A probléma megoldására régóta kifejlesztették már a lokális verziókövető rendszereket (Local Version Control System, LVCS), amelyek egy egyszerű adatbázis segítségével tartják nyilván az adott fájlokat.

.Lokális verziókezelés.
image::images/local.png[Lokális verziókezelés diagram]

Az egyik legnépszerűbb lokális verziókezelő a GNU Revision Control System (RCS), amely még ma is sok gyártó disztribúciójában elérhető, még Mac OS X-en is, ha feltelepítjük a Fejlesztői Eszközöket.
Ez a rendszer gyakorlatilag úgy működik, hogy megőrzi a verziók közötti "patch"-eket (fájlverziók közötti különbségeket) egy speciális formátumban; ezután egy fájl bármely korábbi verzióját vissza tudja állítani a patchek felhasználásával.

==== Központosított verziókezelő rendszerek

(((version control,centralized)))
A lokális verziókezelés után megjelent a csoportos együttműködés problémája, azaz hogyan dolgozzon hatékonyan ugyanazon a forráson egyszerre akár több ember is.
A probléma megoldására kifejlesztették a központosított verziókezelő rendszereket (Centralized Version Control System, CVSC). Ilyen rendszer például a CVS, a Subversion és a Perforce, ahol egy központi szerver tárolja a verziókezelt fájlokat, a kliensek innen érthetik el a fájlokat. (((CVS)))(((Subversion)))(((Perforce)))
Sok éven keresztül ez volt az általánosan használt verziókezelési módszer.

.Központosított verziókezelés.
image::images/centralized.png[Központosított verziókezelés diagram]

A módszernek számos előnye van, különösképp a lokális verziókezeléssel összehasonlítva.
Például egy projekten belül mindenki láthatja egy bizonyos mértékig, hogy a többiek min dolgoznak éppen.
Az adminisztrátorok beállíthatják, hogy kinek mihez van jogosultsága illetve sokkal egyszerűbb egy központi tárolót karbantartani, mint sok különálló lokális adatbázist a klienseknél.

Ugyanakkor számos komoly hátránya is van a központosított verziókezelésnek.
A legnyilvánvalóbb ezek közül a központi szerver.
Ha egy hiba miatt leáll a szerver, a javítás ideje alatt a fejlesztők nem tudnak együttműködni, nem érik el a verziókezelt fájlokat.
Ha a merevlemez meghibásodik a szerverben és nincs megfelelő biztonsági mentés, akkor a projekt végleg elveszik, leszámítva azokat a fájlokat, amelyeken a fejlesztők éppen dolgoztak a saját gépükön.
Ugyanez a veszély fennáll lokális verziókezelés esetén is; ha egy helyen tárolják a teljes projektet, mindig van esély az adatvesztésre.

==== Elosztott verziókezelő rendszerek

(((version control,distributed)))
Ekkor léptek színre az elosztott verziókezelő rendszerek (Distributed Version Control System, DVCS).
Ezeknél a rendszereknél (mint például Git, Mercurial, Bazaar, vagy Darcs) a kliensek nem csak a fájlok egy adott verzióját kérik le a szerverről, hanem a teljes adatbázist tükrözik.
Így ha egy szerver merevlemeze elromlik, az adatbázis hiánytalanul visszamásolható bármely klienstől.
Minden egyes klón egy teljes értékű biztonsági mentés az adatokról, ezzel jelentősen csökkentve az adatvesztés esélyét.

.Elosztott verziókezelés.
image::images/distributed.png[Elosztott verziókezelés diagram]

Továbbá sok elosztott verziókezelő rendszer képes egyszerre akár több távoli adatbázissal is együttműködni, így lehetőség van arra, hogy egy projekten belül különböző módokon (más munkamenetet követve) dolgozhassanak együtt a fejlesztők.
